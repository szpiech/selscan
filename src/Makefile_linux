# Makefile for selscan (Linux)

# Compiler settings
CC = g++                                      # Use GNU C++ compiler
G++FLAG = -O3 -m64 -mmmx -msse -msse2 --std=c++17 -lm -ftree-vectorize
# -O3              : Maximize optimization
# -m64             : Generate 64-bit code
# -mmmx            : Enable MMX instructions
# -msse -msse2     : Enable SSE and SSE2 vectorization
# --std=c++17      : Use C++17 standard
# -lm              : Link with math library
# -ftree-vectorize : Enable loop vectorization for performance

# Include and library directories
I_PATH = -I../include                         # Header search path
L_PATH = ../lib/linux                         # Directory containing GSL libraries

# Linking options
LINK_OPTS_SELSCAN = -pthread -lz              # Used for building 'selscan' (POSIX threads, zlib)
LINK_OPTS_NORM = -L$(L_PATH) -lgsl -lgslcblas # Used for building 'norm' (GSL dynamic linking)
# Static alternative:
# LINK_OPTS_NORM = $(L_PATH)/libgsl.a $(L_PATH)/libgslcblas.a

# Object files
OBJ_STATS = xpihh.o ehh.o ihs.o ihh12.o pi.o ehh12.o
# OBJ_FILETYPE = hap.o vcf.o vcf_serial.o hap_serial.o
OBJ_HAPMAP = hapdata.o mapdata.o bitset.o

# Default build target
all: selscan norm

# Build selscan binary
selscan: selscan-main.o $(OBJ_STATS) selscan-data.o $(OBJ_HAPMAP) selscan-cli.o binom.o param_t.o gzstream.o thread_pool.o 
	$(CC) $(G++FLAG) -o selscan $^ $(LINK_OPTS_SELSCAN)

# Build norm binary
norm: norm.o param_t.o
	$(CC) $(G++FLAG) -o norm $^ $(LINK_OPTS_NORM)

# Compilation rules
selscan-main.o: selscan-main.cpp
	$(CC) $(G++FLAG) -c $< $(I_PATH)

selscan-data.o: selscan-data.cpp selscan-data.h
	$(CC) $(G++FLAG) -c $< $(I_PATH)

selscan-cli.o: selscan-cli.cpp selscan-cli.h
	$(CC) $(G++FLAG) -c $< $(I_PATH)

binom.o: binom.cpp binom.h
	$(CC) $(G++FLAG) -c $<

norm.o: norm.cpp
	$(CC) $(G++FLAG) -c $< $(I_PATH)

param_t.o: param_t.cpp param_t.h
	$(CC) $(G++FLAG) -c $<

gzstream.o: gzstream.cpp gzstream.h
	$(CC) $(G++FLAG) -c $< $(I_PATH)

thread_pool.o: thread_pool.cpp thread_pool.h
	$(CC) $(G++FLAG) -c $< $(LINK_OPTS_SELSCAN)

# Pattern rules
%.o: hapmap/%.cpp hapmap/%.h 
	$(CC) $(G++FLAG) -c $< -o $@ $(I_PATH)

%.o: stats/%.cpp stats/%.h 
	$(CC) $(G++FLAG) -c $< -o $@ $(I_PATH)

# %.o: filetype/%.cpp filetype/%.h 
# 	$(CC) $(G++FLAG) -c $< -o $@ $(I_PATH)

# Cleanup
clean:
	rm -rf *.o norm selscan
