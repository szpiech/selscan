# Makefile for selscan (macOS ARM) -

# Compiler
CC = g++ 	
#clang++ and g++ are both supported

# Optimization and architecture flags  and language standard setup
G++FLAG = -O3 -m64 -ftree-vectorize -w -Wno-psabi -std=c++17 
#G++FLAG = -DDEBUG -O0 -g -w -Wno-psabi -std=c++17 
# -O3              : Maximum optimization level
# -m64             : Generate 64-bit code
# -arch arm64      : Target Apple Silicon (ARM64) architecture
# -ftree-vectorize : Enable automatic vectorization of loops
# -w               : Suppress all warnings
# -Wno-psabi       : Disable warnings about ABI differences (useful for ARM cross-compilation)
# -std=c++17       : Use the C++17 language standard


# Include and library paths
I_PATH = -I../include                     # Header file search path
L_PATH = ../lib/macos-arm                 # Path to GSL libraries

# Linking options
LINK_OPTS_SELSCAN = -lpthread -lz         # Link with pthread and zlib for selscan
LINK_OPTS_NORM = -L$(L_PATH) -lgsl -lgslcblas # Link with GSL and CBLAS for norm #LINK_OPTS_NORM = $(L_PATH)/libgsl.a $(L_PATH)/libgslcblas.a   #For static linking of norm program to gsl libs

# Object file groups
OBJ_STATS = xpihh.o ehh.o ihs.o ihh12.o pi.o ehh12.o
OBJ_HAPMAP = hapdata.o mapdata.o bitset.o

# Build all targets
all: selscan norm

# Build selscan binary
selscan: selscan-main.o $(OBJ_STATS) selscan-data.o $(OBJ_HAPMAP) selscan-cli.o binom.o param_t.o gzstream.o thread_pool.o
	$(CC) $(G++FLAG) -o selscan $^ $(LINK_OPTS_SELSCAN)

# Build norm binary
norm: norm.o param_t.o
	$(CC) $(G++FLAG) -o norm $^ $(LINK_OPTS_NORM)

# Compilation rules
selscan-main.o: selscan-main.cpp
	$(CC) $(G++FLAG) -c $< $(I_PATH)

selscan-data.o: selscan-data.cpp selscan-data.h
	$(CC) $(G++FLAG) -c $< $(I_PATH)

selscan-cli.o: selscan-cli.cpp selscan-cli.h
	$(CC) $(G++FLAG) -c $< $(I_PATH)

binom.o: binom.cpp binom.h
	$(CC) $(G++FLAG) -c $<

norm.o: norm.cpp
	$(CC) $(G++FLAG) -c $< $(I_PATH)

param_t.o: param_t.cpp param_t.h
	$(CC) $(G++FLAG) -c $<

gzstream.o: gzstream.cpp gzstream.h
	$(CC) $(G++FLAG) -c $< $(I_PATH)

thread_pool.o: thread_pool.cpp thread_pool.h
	$(CC) $(G++FLAG) -c $< $(LINK_OPTS_SELSCAN)

# Pattern rules for hapmap and stats modules
%.o: hapmap/%.cpp hapmap/%.h
	$(CC) $(G++FLAG) -c $< -o $@ $(I_PATH)

%.o: stats/%.cpp stats/%.h
	$(CC) $(G++FLAG) -c $< -o $@ $(I_PATH)

# Optional: filetype modules (currently disabled)
# %.o: filetype/%.cpp filetype/%.h
# 	$(CC) $(G++FLAG) -c $< -o $@ $(I_PATH)

# Cleanup rules
.PHONY: clean
clean:
	rm -rf *.o selscan norm
# rm -rf outfile*
